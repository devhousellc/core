{"version":3,"file":"popup.js","sourceRoot":"","sources":["../../src/util/popup.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,WAAW,EAMZ,MAAM,eAAe,CAAC;AAEvB,IAAA;IACE,oBAAmB,KAAY,EAAS,OAAiB,EAAS,YAAgC;QAA/E,UAAK,GAAL,KAAK,CAAO;QAAS,YAAO,GAAP,OAAO,CAAU;QAAS,iBAAY,GAAZ,YAAY,CAAoB;KAAI;qBAXxG;IAYC,CAAA;AAFD,sBAEC;AAED,IAAA;IAIE,sBACY,KAAU,EAAU,SAAmB,EAAU,iBAAmC,EACpF,SAAoB,EAAU,yBAAmD;QADjF,UAAK,GAAL,KAAK,CAAK;QAAU,cAAS,GAAT,SAAS,CAAU;QAAU,sBAAiB,GAAjB,iBAAiB,CAAkB;QACpF,cAAS,GAAT,SAAS,CAAW;QAAU,8BAAyB,GAAzB,yBAAyB,CAA0B;KAAI;IAEjG,2BAAI,GAAJ,UAAK,OAAmC,EAAE,OAAa;QACrD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACzD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,eAAe,CACpD,IAAI,CAAC,yBAAyB,CAAC,uBAAuB,CAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,SAAS,EACxF,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;SAC7B;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;KACxB;IAED,4BAAK,GAAL;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACpB,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YACxF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC7B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,CAAC;gBACxF,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;aACzB;SACF;KACF;IAEO,qCAAc,GAAtB,UAAuB,OAAkC,EAAE,OAAa;QACtE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YACb,MAAM,CAAC,IAAI,UAAU,CAAC,EAAE,CAAC,CAAC;SAC3B;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,YAAY,WAAW,CAAC,CAAC,CAAC;YAC1C,IAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAiB,OAAO,EAAE,OAAO,CAAC,CAAC;YAC5F,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,CAAC;SACrD;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,KAAG,OAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SACpE;KACF;uBAtDH;IAuDC,CAAA;AAzCD,wBAyCC","sourcesContent":["import {\r\n  Injector,\r\n  TemplateRef,\r\n  ViewRef,\r\n  ViewContainerRef,\r\n  Renderer2,\r\n  ComponentRef,\r\n  ComponentFactoryResolver\r\n} from '@angular/core';\r\n\r\nexport class ContentRef {\r\n  constructor(public nodes: any[], public viewRef?: ViewRef, public componentRef?: ComponentRef<any>) {}\r\n}\r\n\r\nexport class PopupService<T> {\r\n  private _windowRef: ComponentRef<T>;\r\n  private _contentRef: ContentRef;\r\n\r\n  constructor(\r\n      private _type: any, private _injector: Injector, private _viewContainerRef: ViewContainerRef,\r\n      private _renderer: Renderer2, private _componentFactoryResolver: ComponentFactoryResolver) {}\r\n\r\n  open(content?: string | TemplateRef<any>, context?: any): ComponentRef<T> {\r\n    if (!this._windowRef) {\r\n      this._contentRef = this._getContentRef(content, context);\r\n      this._windowRef = this._viewContainerRef.createComponent(\r\n          this._componentFactoryResolver.resolveComponentFactory<T>(this._type), 0, this._injector,\r\n          this._contentRef.nodes);\r\n    }\r\n\r\n    return this._windowRef;\r\n  }\r\n\r\n  close() {\r\n    if (this._windowRef) {\r\n      this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._windowRef.hostView));\r\n      this._windowRef = null;\r\n\r\n      if (this._contentRef.viewRef) {\r\n        this._viewContainerRef.remove(this._viewContainerRef.indexOf(this._contentRef.viewRef));\r\n        this._contentRef = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  private _getContentRef(content: string | TemplateRef<any>, context?: any): ContentRef {\r\n    if (!content) {\r\n      return new ContentRef([]);\r\n    } else if (content instanceof TemplateRef) {\r\n      const viewRef = this._viewContainerRef.createEmbeddedView(<TemplateRef<T>>content, context);\r\n      return new ContentRef([viewRef.rootNodes], viewRef);\r\n    } else {\r\n      return new ContentRef([[this._renderer.createText(`${content}`)]]);\r\n    }\r\n  }\r\n}\r\n"]}